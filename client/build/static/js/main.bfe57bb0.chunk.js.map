{"version":3,"sources":["Header.jsx","utils.jsx","NewTransfer.jsx","TransferList.jsx","App.jsx","index.jsx"],"names":["Header","approvers","quorum","join","getWallet","web3","a","eth","net","getId","networkId","deployedNetwork","Wallet","networks","Contract","abi","address","NewTransfer","createTransfer","useState","undefined","transfer","SetTransfer","amount","setAmount","to","setTo","updateTransfer","e","field","value","target","onSubmit","preventDefault","htmlFor","type","id","onChange","required","TransferList","transfers","approveTransfer","console","log","map","approvals","onClick","sent","App","setWeb3","accounts","setAccounts","wallet","setWallet","setApprovers","setQuorum","getTransfers","useEffect","init","Promise","resolve","reject","detectEthereumProvider","provider","request","method","Web3","window","ethereum","error","requestAccounts","methods","getApprovers","call","length","send","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfe57bb0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header({approvers,quorum}) {\r\n    return (\r\n        <header>\r\n            <ul>\r\n                <li>Approvers: {approvers.join(', ')}</li>\r\n                <li>Quorum: {quorum}</li>\r\n            </ul>\r\n        </header>\r\n    )\r\n}\r\n","import Web3 from 'web3';\r\nimport Wallet from './contracts/Wallet.json'\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst getWeb3 = () =>\r\n\r\n    new Promise(async (resolve, reject) => {\r\n\r\n        let provider = await detectEthereumProvider();\r\n\r\n        if (provider) {\r\n\r\n            await provider.request({ method:'eth_requestAccounts'});\r\n\r\n            try {\r\n\r\n                const web3 = new Web3(window.ethereum);\r\n\r\n                resolve(web3);\r\n\r\n            } catch (error) {\r\n\r\n                reject(error);\r\n\r\n            }\r\n\r\n        } reject('Install Metamask');\r\n\r\n    });\r\n\r\nconst getWallet = async web3 => {\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetwork = Wallet.networks[networkId];\r\n    return new web3.eth.Contract(\r\n        Wallet.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n    );\r\n}\r\n\r\nexport { getWeb3, getWallet };","import React, { useState } from 'react'\r\n\r\nfunction NewTransfer({createTransfer}) {\r\n\r\n    const [transfer, SetTransfer] = useState(undefined);\r\n    const [amount ,setAmount] = useState('');\r\n    const [to ,setTo] = useState('');\r\n\r\n    \r\n    const updateTransfer = (e, field) => {\r\n        const value = e.target.value;\r\n        if(field === 'amount'){\r\n            setAmount(e.target.value)\r\n        }\r\n        if(field === 'to'){\r\n            setTo(e.target.value)\r\n        }\r\n        SetTransfer({...transfer, [field] : value});\r\n    }\r\n\r\n    const submit = e =>{\r\n        e.preventDefault();\r\n        setAmount(0);\r\n        setTo('');\r\n        createTransfer(transfer);\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Create Transfer</h2>\r\n            <form onSubmit={submit}>\r\n                <label htmlFor=\"amount\">Amount</label>\r\n                <input \r\n                type=\"text\"\r\n                id='amount'\r\n                onChange={e => {updateTransfer(e,'amount')}}\r\n                value={amount}\r\n                required\r\n                 />\r\n                <label htmlFor=\"to\">To</label>\r\n                <input \r\n                type=\"text\"\r\n                id='to'\r\n                value={to}\r\n                onChange={e => {updateTransfer(e,'to')}}\r\n                required\r\n                 />\r\n\r\n                 <button type=\"submit\">Submit Transaction</button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewTransfer\r\n","import React from 'react'\r\n\r\nfunction TransferList({transfers, approveTransfer}) {\r\n    console.log(transfers)\r\n    return (\r\n        <div>\r\n            <h2>Transfers</h2>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Amount</th>\r\n                        <th>To</th>\r\n                        <th>Approvals</th>\r\n                        <th>Sent</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transfers.map(transfer =>{\r\n                        return(\r\n                        <tr key={transfer.id}>\r\n                            <td>{transfer.id}</td>\r\n                            <td>{transfer.amount}</td>\r\n                            <td>{transfer.to}</td>\r\n                            <td>\r\n                            {transfer.approvals}\r\n                            <button onClick = {() => approveTransfer(transfer.id)}>Approve</button>\r\n                            </td>\r\n                            <td>{transfer.sent?'yes':'no'}</td>\r\n                        </tr>\r\n                    )})}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransferList\r\n","import React, { useState, useEffect } from 'react'\nimport Header from './Header';\nimport {getWallet, getWeb3} from './utils'\nimport NewTransfer from './NewTransfer';\nimport TransferList from './TransferList';\n\nfunction App() {\n  const [web3,setWeb3] = useState(undefined);\n  const [accounts,setAccounts] = useState(undefined);\n  const [wallet,setWallet] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const [quorum, setQuorum] = useState(undefined);\n  const [transfers, getTransfers] = useState([]);\n\n  useEffect(() => {\n    const init = async() =>{\n      const web3 = await getWeb3();\n      console.log(web3.eth)\n      const accounts = await web3.eth.requestAccounts();\n      const wallet = await getWallet(web3);\n      const approvers = await wallet.methods.getApprovers().call();\n      const quorum = await wallet.methods.quorum().call();\n      const transfers = await wallet.methods.getTransfers().call();\n      setWeb3(web3);\n      setAccounts(accounts);\n      setWallet(wallet);\n      setApprovers(approvers);\n      setQuorum(quorum); \n      getTransfers(transfers);\n    }\n    init();\n  },[])\n\n  console.log(transfers)\n\n  if(\n    typeof web3 === 'undefined'\n    || typeof accounts === 'undefined'\n    || typeof wallet === 'undefined'\n    || approvers.length === 0\n    || typeof quorum === 'undefined'\n  ){\n    return <div>Loading...</div>;\n  }\n\n  const createTransfer = async (transfer) => {\n    wallet.methods\n    .createTransfer(transfer.amount, transfer.to)\n    .send({from: accounts[0]});\n\n    const transfers = await wallet.methods.getTransfers().call();\n    getTransfers(transfers);\n\n  }\n\n  const approveTransfer = async (id) => {\n    wallet.methods\n    .approveTransfer(id)\n    .send({from: accounts[0]});\n\n    const transfers = await wallet.methods.getTransfers().call();\n    getTransfers(transfers);\n  }\n\n  return (\n    <>\n      MultiSig Wallet\n      <Header approvers={approvers} quorum = {quorum} />\n      <NewTransfer createTransfer={createTransfer} />\n      <TransferList transfers = {transfers}  approveTransfer ={approveTransfer}/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}